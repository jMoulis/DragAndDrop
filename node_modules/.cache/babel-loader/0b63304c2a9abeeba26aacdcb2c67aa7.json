{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tiago/Desktop/encod/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/tiago/Desktop/encod/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/tiago/Desktop/encod/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/tiago/Desktop/encod/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/tiago/Desktop/encod/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tiago/Desktop/encod/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tiago/Desktop/encod/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tiago/Desktop/encod/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tiago/Desktop/encod/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tiago/Desktop/encod/src/Components/DragAndDrop.js\";\nimport React, { Component, Fragment } from \"react\";\nimport axios from \"axios\";\nimport Progress from \"../Progress\";\nimport Message from \"../Message\";\nexport var DragAndDrop =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DragAndDrop, _Component);\n\n  function DragAndDrop() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DragAndDrop);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DragAndDrop)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      file: \"\",\n      uploading: false,\n      message: \"\",\n      error: false,\n      uploadedFiles: [],\n      progress: 0\n    };\n\n    _this.validateFile = function () {\n      //return true; // testing for server side error\n      var file = _this.state.file;\n      var MAX_SIZE = 5000000; // 5MB\n\n      var allowedTypes = [\"image/jpeg\", \"image/png\", \"image/gif\"]; // check if images size too large return true\n\n      var tooLarge = file.size > MAX_SIZE; // check if file attach is image return true\n\n      var isImage = allowedTypes.includes(file.type); //console.log(\"tooLarge:\", tooLarge);\n      //console.log(\"isImage:\", isImage);\n\n      if (isImage && !tooLarge) {\n        _this.setState({\n          error: false,\n          message: \"\"\n        });\n\n        return true;\n      } else {\n        _this.setState({\n          error: true,\n          message: tooLarge && isImage ? \"\".concat(file.name, \" - Too large. Max size is \").concat(MAX_SIZE / 1000, \"KB\") : \"\".concat(file.name, \" - Only images are allowed!\")\n        });\n\n        return false;\n      }\n    };\n\n    _this._onChange =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var _ref$target, name, files, formData, _ref3, file;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _ref$target = _ref.target, name = _ref$target.name, files = _ref$target.files;\n                _context.next = 3;\n                return _this.setState(_defineProperty({}, name, files[0]));\n\n              case 3:\n                if (_this.validateFile()) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                _context.prev = 5;\n\n                _this.setState({\n                  uploading: true\n                });\n\n                formData = new FormData();\n                formData.append(\"file\", _this.state.file); // API Call using axios\n\n                _context.next = 11;\n                return axios.post(\"/single-dropzone\", formData, {\n                  onUploadProgress: function onUploadProgress(event) {\n                    return _this.setState({\n                      progress: Math.floor(event.loaded * 100 / event.total)\n                    });\n                  }\n                });\n\n              case 11:\n                _ref3 = _context.sent;\n                file = _ref3.data.file;\n                _context.next = 15;\n                return _this.setState({\n                  file: \"\",\n                  uploadedFiles: [].concat(_toConsumableArray(_this.state.uploadedFiles), [file]),\n                  uploading: false,\n                  progress: 0,\n                  error: false,\n                  message: \"File has been succussfully uploaded!\"\n                });\n\n              case 15:\n                _context.next = 20;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](5);\n\n                _this.setState({\n                  uploading: false,\n                  error: true,\n                  message: _context.t0.response.data.error\n                });\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[5, 17]]);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(DragAndDrop, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          file = _this$state.file,\n          uploading = _this$state.uploading,\n          message = _this$state.message,\n          error = _this$state.error,\n          uploadedFiles = _this$state.uploadedFiles,\n          progress = _this$state.progress;\n      return React.createElement(\"form\", {\n        encType: \"multipart/form-data\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, message && React.createElement(Message, {\n        message: message,\n        error: error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"dropzone z-depth-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        name: \"file\",\n        className: \"input-dropzone\",\n        onChange: this._onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), !uploading && React.createElement(\"p\", {\n        className: \"call-to-action\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Single File Drag and Drop Upload \"), uploading && React.createElement(Progress, {\n        progress: progress,\n        fileName: file.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      })), uploadedFiles.length > 0 && React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Successfully uploaded files: \"), uploadedFiles.map(function (file, index) {\n        return React.createElement(\"div\", {\n          className: \"col s4\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"card-image\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: file,\n          alt: \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }))));\n      })));\n    }\n  }]);\n\n  return DragAndDrop;\n}(Component);\nexport default DragAndDrop;","map":{"version":3,"sources":["/Users/tiago/Desktop/encod/src/Components/DragAndDrop.js"],"names":["React","Component","Fragment","axios","Progress","Message","DragAndDrop","state","file","uploading","message","error","uploadedFiles","progress","validateFile","MAX_SIZE","allowedTypes","tooLarge","size","isImage","includes","type","setState","name","_onChange","target","files","formData","FormData","append","post","onUploadProgress","event","Math","floor","loaded","total","data","response","length","map","index"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,WAAaC,WAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UACEC,KADF,GACU;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,SAAS,EAAE,KAFL;AAGNC,MAAAA,OAAO,EAAE,EAHH;AAINC,MAAAA,KAAK,EAAE,KAJD;AAKNC,MAAAA,aAAa,EAAE,EALT;AAMNC,MAAAA,QAAQ,EAAE;AANJ,KADV;;AAAA,UAWEC,YAXF,GAWiB,YAAM;AACnB;AADmB,UAGXN,IAHW,GAGF,MAAKD,KAHH,CAGXC,IAHW;AAKnB,UAAMO,QAAQ,GAAG,OAAjB,CALmB,CAKO;;AAC1B,UAAMC,YAAY,GAAG,CAAC,YAAD,EAAe,WAAf,EAA4B,WAA5B,CAArB,CANmB,CAQnB;;AACA,UAAMC,QAAQ,GAAGT,IAAI,CAACU,IAAL,GAAYH,QAA7B,CATmB,CAWnB;;AACA,UAAMI,OAAO,GAAGH,YAAY,CAACI,QAAb,CAAsBZ,IAAI,CAACa,IAA3B,CAAhB,CAZmB,CAcnB;AACA;;AAEA,UAAIF,OAAO,IAAI,CAACF,QAAhB,EAA0B;AACxB,cAAKK,QAAL,CAAc;AAAEX,UAAAA,KAAK,EAAE,KAAT;AAAgBD,UAAAA,OAAO,EAAE;AAAzB,SAAd;;AAEA,eAAO,IAAP;AACD,OAJD,MAIO;AACL,cAAKY,QAAL,CAAc;AACZX,UAAAA,KAAK,EAAE,IADK;AAEZD,UAAAA,OAAO,EACLO,QAAQ,IAAIE,OAAZ,aACOX,IAAI,CAACe,IADZ,uCAC6CR,QAAQ,GAAG,IADxD,oBAEOP,IAAI,CAACe,IAFZ;AAHU,SAAd;;AAQA,eAAO,KAAP;AACD;AACF,KA3CH;;AAAA,UA8CEC,SA9CF;AAAA;AAAA;AAAA;AAAA;AAAA,+BA8Cc;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mCAASC,MAAT,EAAmBF,IAAnB,eAAmBA,IAAnB,EAAyBG,KAAzB,eAAyBA,KAAzB;AAAA;AAAA,uBACJ,MAAKJ,QAAL,qBACHC,IADG,EACIG,KAAK,CAAC,CAAD,CADT,EADI;;AAAA;AAAA,oBAML,MAAKZ,YAAL,EANK;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AASR,sBAAKQ,QAAL,CAAc;AAAEb,kBAAAA,SAAS,EAAE;AAAb,iBAAd;;AAEMkB,gBAAAA,QAXE,GAWS,IAAIC,QAAJ,EAXT;AAaRD,gBAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB,MAAKtB,KAAL,CAAWC,IAAnC,EAbQ,CAeR;;AAfQ;AAAA,uBAkBEL,KAAK,CAAC2B,IAAN,CAAW,kBAAX,EAA+BH,QAA/B,EAAyC;AACjDI,kBAAAA,gBAAgB,EAAE,0BAAAC,KAAK;AAAA,2BACrB,MAAKV,QAAL,CAAc;AACZT,sBAAAA,QAAQ,EAAEoB,IAAI,CAACC,KAAL,CAAYF,KAAK,CAACG,MAAN,GAAe,GAAhB,GAAuBH,KAAK,CAACI,KAAxC;AADE,qBAAd,CADqB;AAAA;AAD0B,iBAAzC,CAlBF;;AAAA;AAAA;AAiBE5B,gBAAAA,IAjBF,SAiBN6B,IAjBM,CAiBE7B,IAjBF;AAAA;AAAA,uBA0BF,MAAKc,QAAL,CAAc;AAClBd,kBAAAA,IAAI,EAAE,EADY;AAElBI,kBAAAA,aAAa,+BAAM,MAAKL,KAAL,CAAWK,aAAjB,IAAgCJ,IAAhC,EAFK;AAGlBC,kBAAAA,SAAS,EAAE,KAHO;AAIlBI,kBAAAA,QAAQ,EAAE,CAJQ;AAKlBF,kBAAAA,KAAK,EAAE,KALW;AAMlBD,kBAAAA,OAAO,EAAE;AANS,iBAAd,CA1BE;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAmCR,sBAAKY,QAAL,CAAc;AACZb,kBAAAA,SAAS,EAAE,KADC;AAEZE,kBAAAA,KAAK,EAAE,IAFK;AAGZD,kBAAAA,OAAO,EAAE,YAAI4B,QAAJ,CAAaD,IAAb,CAAkB1B;AAHf,iBAAd;;AAnCQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA9Cd;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BAyFW;AAAA,wBAQH,KAAKJ,KARF;AAAA,UAELC,IAFK,eAELA,IAFK;AAAA,UAGLC,SAHK,eAGLA,SAHK;AAAA,UAILC,OAJK,eAILA,OAJK;AAAA,UAKLC,KALK,eAKLA,KALK;AAAA,UAMLC,aANK,eAMLA,aANK;AAAA,UAOLC,QAPK,eAOLA,QAPK;AASP,aACE;AAAM,QAAA,OAAO,EAAC,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGH,OAAO,IAAI,oBAAC,OAAD;AAAS,QAAA,OAAO,EAAEA,OAAlB;AAA2B,QAAA,KAAK,EAAEC,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADd,EAGE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,SAAS,EAAC,gBAHZ;AAIE,QAAA,QAAQ,EAAE,KAAKa,SAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAQG,CAACf,SAAD,IACC;AAAG,QAAA,SAAS,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CATJ,EAYGA,SAAS,IAAI,oBAAC,QAAD;AAAU,QAAA,QAAQ,EAAEI,QAApB;AAA8B,QAAA,QAAQ,EAAEL,IAAI,CAACe,IAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAZhB,CAHF,EAkBGX,aAAa,CAAC2B,MAAd,GAAuB,CAAvB,IACC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCADF,EAEG3B,aAAa,CAAC4B,GAAd,CAAkB,UAAChC,IAAD,EAAOiC,KAAP;AAAA,eACjB;AAAK,UAAA,SAAS,EAAC,QAAf;AAAwB,UAAA,GAAG,EAAEA,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAK,UAAA,GAAG,EAAEjC,IAAV;AAAgB,UAAA,GAAG,EAAC,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF,CADF,CADiB;AAAA,OAAlB,CAFH,CAnBJ,CADF;AAmCD;AArIH;;AAAA;AAAA,EAAiCP,SAAjC;AAwIA,eAAeK,WAAf","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport axios from \"axios\";\n\nimport Progress from \"../Progress\";\nimport Message from \"../Message\";\n\nexport class DragAndDrop extends Component {\n  state = {\n    file: \"\",\n    uploading: false,\n    message: \"\",\n    error: false,\n    uploadedFiles: [],\n    progress: 0\n  };\n\n  // Validate File Method\n  validateFile = () => {\n    //return true; // testing for server side error\n\n    const { file } = this.state;\n\n    const MAX_SIZE = 5000000; // 5MB\n    const allowedTypes = [\"image/jpeg\", \"image/png\", \"image/gif\"];\n\n    // check if images size too large return true\n    const tooLarge = file.size > MAX_SIZE;\n\n    // check if file attach is image return true\n    const isImage = allowedTypes.includes(file.type);\n\n    //console.log(\"tooLarge:\", tooLarge);\n    //console.log(\"isImage:\", isImage);\n\n    if (isImage && !tooLarge) {\n      this.setState({ error: false, message: \"\" });\n\n      return true;\n    } else {\n      this.setState({\n        error: true,\n        message:\n          tooLarge && isImage\n            ? `${file.name} - Too large. Max size is ${MAX_SIZE / 1000}KB`\n            : `${file.name} - Only images are allowed!`\n      });\n\n      return false;\n    }\n  };\n\n  // Input Change & Submit Form Method\n  _onChange = async ({ target: { name, files } }) => {\n    await this.setState({\n      [name]: files[0]\n    });\n\n    // skip process if invalid file\n    if (!this.validateFile()) return;\n\n    try {\n      this.setState({ uploading: true });\n\n      const formData = new FormData();\n\n      formData.append(\"file\", this.state.file);\n\n      // API Call using axios\n      const {\n        data: { file }\n      } = await axios.post(\"/single-dropzone\", formData, {\n        onUploadProgress: event =>\n          this.setState({\n            progress: Math.floor((event.loaded * 100) / event.total)\n          })\n      });\n      //console.log(file);\n\n      await this.setState({\n        file: \"\",\n        uploadedFiles: [...this.state.uploadedFiles, file],\n        uploading: false,\n        progress: 0,\n        error: false,\n        message: \"File has been succussfully uploaded!\"\n      });\n    } catch (err) {\n      this.setState({\n        uploading: false,\n        error: true,\n        message: err.response.data.error\n      });\n    }\n  };\n\n  render() {\n    const {\n      file,\n      uploading,\n      message,\n      error,\n      uploadedFiles,\n      progress\n    } = this.state;\n    return (\n      <form encType=\"multipart/form-data\">\n        {message && <Message message={message} error={error} />}\n\n        <div className=\"dropzone z-depth-2\">\n          <input\n            type=\"file\"\n            name=\"file\"\n            className=\"input-dropzone\"\n            onChange={this._onChange}\n          />\n\n          {!uploading && (\n            <p className=\"call-to-action\">Single File Drag and Drop Upload </p>\n          )}\n\n          {uploading && <Progress progress={progress} fileName={file.name} />}\n        </div>\n\n        {uploadedFiles.length > 0 && (\n          <Fragment>\n            <h5>Successfully uploaded files: </h5>\n            {uploadedFiles.map((file, index) => (\n              <div className=\"col s4\" key={index}>\n                <div className=\"card\">\n                  <div className=\"card-image\">\n                    <img src={file} alt=\"\" />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </Fragment>\n        )}\n      </form>\n    );\n  }\n}\n\nexport default DragAndDrop;\n"]},"metadata":{},"sourceType":"module"}